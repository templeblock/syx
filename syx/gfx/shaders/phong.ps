#version 330 core
uniform vec3 uAmbient;
uniform vec3 uDiffuse;
uniform sampler2D uTex;
//Specular color with sharpness exponent as the last component
uniform vec4 uSpecular;
uniform vec3 uSunDir;
uniform vec3 uSunColor;

in vec3 oNormal;
in vec3 oEyeToFrag;
in vec2 oUV;

layout(location = 0) out vec3 color;

vec3 gNormal;

//reflect vector (not point) v over normal
vec3 reflect(in vec3 v, in vec3 normal) {
  vec3 proj = normal*dot(v, normal);
  return 2.0*proj - v;
}

void computeLight(in vec3 eyeToFrag, in vec3 lightDir, in vec3 lightColor, out vec3 diffuse, out vec3 specular) {
  //Negated since they're in opposite directions, be we want positive
  float diffTerm = -dot(gNormal, lightDir);
  float specTerm = dot(normalize(eyeToFrag), normalize(reflect(lightDir, gNormal)));
  //Negative means light is coming from behind, so clamp to zero
  diffTerm = max(0.0, diffTerm);
  //If diff is negative there shouldn't be specular, so here min will only matter if diff is 0
  specTerm = min(diffTerm*100000, specTerm);
  specTerm = max(0.0, specTerm);
  
  //Raise to sharpness exponent
  specTerm = pow(specTerm, uSpecular.w);

  diffuse = diffTerm*uDiffuse.xyz*lightColor;
  specular = specTerm*uSpecular.xyz*lightColor;
}

vec3 computeSun() {
  vec3 diff, spec;
  computeLight(oEyeToFrag, uSunDir, uSunColor, diff, spec);
  return diff + spec;
}

void main() {
  gNormal = normalize(oNormal);
  color = uAmbient;
  color += computeSun();
  color = color * texture(uTex, oUV).rgb;
}