local testLocal = "local";
testGlobal = "global";

print("test init script");

local function testArray()
  local arr = NumArray.new(10);
  assert(#arr == 10, "Size should match construction");
  assert(arr:size() == 10, "Size should match construction");
  arr[1] = 1;
  assert(arr[1] == 1, "Set should have worked");
  tostring(arr);
  print("testArray complete");
end

local function testVec()
  local v = NumVec.new();
  assert(#v == 0, "New vector should be empty");
  assert(v:size() == 0, "New vector should be empty");
  assert(v:empty() == true, "New vector should be empty");
  v:pushBack(1);
  assert(#v == 1, "Push should have increased size");
  assert(v[1] == 1, "Element should be there");
  v:popBack();
  assert(v:empty(), "Should have popped");
  v:resize(100);
  for i = 1, 100 do
    v[i] = i;
  end
  assert(v:find(50) == 50, "Should have found element");
  assert(v:find(200) == 0, "Shouldn't have found element");
  v:resize(50);
  assert(v:size() == 50, "Resize should have shrunk");
  tostring(v);
  v:clear();
  assert(v:empty(), "clear should have emptied container");
  v:reserve(10);
  print("testVec complete");
end

local function testVec3()
  local v = Vec3.new3(1, 2, 3);
  assert(v[1] == 1 and v[2] == 2 and v[3] == 3, "3 Constructor should have worked");
  v = Vec3.newSplat(1);
  assert(v[1] == 1 and v[2] == 1 and v[3] == 1, "Splat constructor should have worked");
  v = Vec3.new();
  assert(v == Vec3.zero(), "Default constructor should be zero");
  assert(v:len() == 0, "Zero should have zero length");
  assert(v:len2() == 0, "Zero should have zero squared length");
  v:set(1, 0, 0);
  assert(v == Vec3.unitX(), "Set should set in place");
  local c = v:copy();
  assert(v == c, "Copy should have copied");
  v[1] = 0; v[2] = 1; v[3] = 0;
  assert(v == Vec3.unitY(), "Newindex should set");
  v = Vec3.unitX():add(Vec3.unitY());
  assert(v[1] == 1 and v[2] == 1 and v[3] == 0, "Static add should work");
  v = Vec3.unitX():sub(Vec3.unitY());
  local d = Vec3.unitX():dot(Vec3.one());
  assert(d == 1, "X dot 1 should be one");
  v = v:normalized();
  v = v:mulVec(Vec3.unitZ());
  v = v:mulScalar(2);
  v = v:projOnto(Vec3.unitX());
  d = v:dist(Vec3.unitX());
  d = v:dist2(Vec3.unitX());
  v = v:neg();
  v = v:recip();
  v = v:divScalar(2);
  local ba, bb = v:getBasis();
  assert(ba ~= nil and bb ~= nil, "getBasis should return two values");
  v = v:cross(Vec3.unitX());
  d = v:dot(Vec3.unitY());
  v:lerp(Vec3.unitZ(), 0.5);
  print(v);
  print("testVec3 complete");
end

local function testQuat()
  local q = Quat.newAxisAngle(Vec3.unitX(), 0.5);
  local q2 = Quat.newFromTo(Vec3.unitX(), Vec3.unitZ());
  local q3 = Quat.newLookAt(Vec3.unitX());
  local q4 = Quat.newLookAt(Vec3.unitX(), Vec3.unitY());
  assert(q3 == q4, "Look at default up should be unit y");
  q4 = q4:inverse();
  q3 = q3:normalized();
  q = q2:mul(q3);
  q = q:mulScalar(2);
  local r = q:rot(Vec3.unitX());
  local x, y, z = q:getBasis();
  local s = q:slerp(q2, 0.5);
  print(q);
  print("testQuat complete");
end

local init = true;

local function testClone(self)
  local copy = self:clone();
  local physicsProps = copy.physics:getProps();
  physicsProps.linVel = Vec3.add(physicsProps.linVel, Vec3.new3(0, 5, 0));
  copy.physics:setProps(physicsProps);
end

local function testProps(self)
  local physicsProps = self.physics:getProps();
  physicsProps.linVel = physicsProps.linVel:add(Vec3.new3(1, 1, 0));
  self.physics:setProps(physicsProps);
end

local function testProp(self)
  local vel = self.physics:getProp("linVel");
  vel = vel:add(Vec3.new3(-1.5, -1, 0));
  self.physics:setProp("linVel", vel);
end

local totalTime = 0;
local addRemoveStage = 0;
local function testAddRemove(self, dt)
  totalTime = totalTime + dt;
  if addRemoveStage == 0 and totalTime > 2 then
    addRemoveStage = 1;
    self:removeComponent('Renderable');
  elseif addRemoveStage == 1 and totalTime > 4 then
    addRemoveStage = 2;
    local renderable = self:addComponent('Renderable');
    local props = {
      model = AssetRepo.getOrLoadAsset('models/cube.obj'),
      diffuseTexture = AssetRepo.getOrLoadAsset('textures/test.bmp')
    };
    renderable:setProps(props);
  elseif addRemoveStage == 2 and totalTime > 6 then
    Space.get("cloned").cloneScene(0, 1);
    addRemoveState = 3;
    print("Scene cloned");
  end
end

local initObj = nil;
function initialize(self)
  local obj = self.space:addObject({
    components = {
      {
        props = {
          diffuseTexture = 1088482667,
          model = 2263845287
        },
        type = "Renderable"
      },
      {
        props = {
          matrix = {
            0.01, 0, 0, 0,
            0, 0.01, 0, 0,
            0, 0, 0.01, 0,
            -5, 0, 0, 1
          }
        },
        type = "Transform"
      }
    }
  });
  obj.renderable = { model = 2775790889 };
  obj.physics = {};
  initObj = obj;
  print("lua initialize");
end

function initPost(self)
  initObj.renderable.model = 2263845287;
  print("New object angular velocity "..tostring(initObj.physics.angVel));
end

local hasSaved = false;
local loadDelay = 1.5;
local hasInitPost = false;
function update(self, dt)
  if hasInitPost == false then
    initPost(self);
    hasInitPost = true;
  end
  if hasSaved == false then
    self.space:save("scene");
    hasSaved = true;
  end
  --[[
  if loadDelay > 0 then
    loadDelay = loadDelay - dt;
    if loadDelay <= 0 then
      self.space:load("scene");
    end
  end
  ]]
  --[[
  if init then
    init = false;
    testArray();
    testVec();
    testVec3();
    testQuat();
    testProps(self);
    testProp(self);
  end
  testAddRemove(self, dt);
  ]]
end

function printRenderableProps(dt, gfx)
  print('Update, model '..tostring(gfx.model)..' texture '..tostring(gfx.diffuseTexture));
end