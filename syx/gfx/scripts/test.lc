local testLocal = "local";
testGlobal = "global";

print("test init script");

local function testArray()
  local arr = NumArray.new(10);
  assert(#arr == 10, "Size should match construction");
  assert(arr:size() == 10, "Size should match construction");
  arr[1] = 1;
  assert(arr[1] == 1, "Set should have worked");
  tostring(arr);
  print("testArray complete");
end

local function testVec()
  local v = NumVec.new();
  assert(#v == 0, "New vector should be empty");
  assert(v:size() == 0, "New vector should be empty");
  assert(v:empty() == true, "New vector should be empty");
  v:pushBack(1);
  assert(#v == 1, "Push should have increased size");
  assert(v[1] == 1, "Element should be there");
  v:popBack();
  assert(v:empty(), "Should have popped");
  v:resize(100);
  for i = 1, 100 do
    v[i] = i;
  end
  assert(v:find(50) == 50, "Should have found element");
  assert(v:find(200) == 0, "Shouldn't have found element");
  v:resize(50);
  assert(v:size() == 50, "Resize should have shrunk");
  tostring(v);
  v:clear();
  assert(v:empty(), "clear should have emptied container");
  v:reserve(10);
  print("testVec complete");
end

local init = true;

function update(dt)
  if init then
    init = false;
    testArray();
    testVec();
  end
end